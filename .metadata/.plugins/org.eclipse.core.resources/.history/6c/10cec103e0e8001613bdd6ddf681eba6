import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

public class Thermostat {

	private final static int SCREEN_WIDTH = 400;
	private final static int SCREEN_HEIGHT = 400;
	private final static String STOP_BUTTON_TEXT = "Stop"; 
	private final static String START_BUTTON_TEXT = "Run"; 
	private JButton startExperiment;
	private JButton stopExperiment;
	private JLabel statusLabel = new JLabel("Status: Initialized");
	private int status; //STATUS 0 = INIT, 1 = RUNNING, 2 = STOPPED
	private int threshold = 2;
	private int target = 70;
	private boolean isRelayOn = false;
	private TempControl controlThread;
	
	public Thermostat(){
		status = 0;
		JFrame frame = new JFrame("Thermostat"); //Make a frame tabbed pane
	    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //Set exit by default when close 
		JPanel mainPanel = new JPanel();
		mainPanel.setLayout(new FlowLayout()); //Add a layout manager to align buttons as we resize
		startExperiment = new JButton(START_BUTTON_TEXT);
		startExperiment.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) { //Add Action listener to respond to button
				updateStatus("Running");
				stop(); //Make sure no existing thread
				controlThread = new TempControl();
				EventQueue.invokeLater(controlThread);
				
			}
			
		});
		
		stopExperiment = new JButton(STOP_BUTTON_TEXT);
		stopExperiment.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) { //Add Action listener to respond to button
				updateStatus("Stopped");
				stop();
				
			}
			
		});
		
		mainPanel.add(statusLabel);
		mainPanel.add(startExperiment);
		mainPanel.add(stopExperiment);
		frame.add(mainPanel);
		frame.setSize(SCREEN_HEIGHT, SCREEN_WIDTH); //Set to screen resolution
	    frame.setVisible(true);
		
	}
	
	private void updateStatus(String newStatus){
		statusLabel.setText("Status: " + newStatus);
	}
	
	private void stop(){
		if(controlThread != null){
			controlThread.shutdown();
			controlThread = null;
		}
	}
	
	private void start(){
		status = 1;
		updateStatus("Running");
	}
	
	
	

}
