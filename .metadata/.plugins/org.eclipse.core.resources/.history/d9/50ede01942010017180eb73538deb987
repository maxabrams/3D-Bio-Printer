import java.util.Date;

public class CameraThread implements Runnable {

	Dish[] dishes;
	static final String SECS = "secs";
	static final String MINS = "mins";
	static final String HOURS = "hours";
	static final String DAYS = "days";
	
	public CameraThread(Dish[] dishes){
		this.dishes = dishes;
	}
	
	@Override
	public void run() {
		Date currTime;
		boolean hasTakenPhoto;
		while(true){ //Loop forever in background
			currTime = new Date(); //For now, just take time at start of loop. Will modify after testing if needed
			hasTakenPhoto = false; //Reuse photo if taken in the same loop
			for(Dish expr : dishes){
				if(expr.isEnabled()){ //Check if dish is "enabled" for taking photos
					double timeVal = Double.MAX_VALUE; //Fake value to override
					switch(expr.getCaptureMetric()){ //TODO: testing to see if this is fast enough. To optimize, we can save calculation when disk object is updated
						case SECS:
							timeVal = expr.getCaptureRate() * 1000;//1000 to convert to seconds, rate for num of seconds
							break;
						case MINS:
							timeVal = expr.getCaptureRate() * 60 * 1000;
							break;
						case HOURS:
							timeVal = expr.getCaptureRate() * 60 * 60 * 1000;
							break;
						case DAYS:
							timeVal = expr.getCaptureRate() * 24 * 60 * 60 * 1000;
							break;
					}

					if(currTime.getTime() - expr.timeOfLastPic().getTime() >= timeVal){
						if(hasTakenPhoto){
							//Reuse photo
						}else{
							hasTakenPhoto = true;
							takePhoto();
						}
						
						}
					}
			}
		
		}
		
	}
	
	private void takePhoto(){
		System.out.println("Photo taken!"); //Simple message for now
	}
	
	private void reusePhoto(){
		System.out.println("Photo resued!");
	}
	}

}
